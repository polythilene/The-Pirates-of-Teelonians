///////////////////////////////////////////////////////////
//  CCaptainJack.as
//  Macromedia ActionScript Implementation of the Class CCaptainJack
//  Generated by Enterprise Architect
//  Created on:      14-Dec-2010 3:02:06 PM
//  Original author: poof!
///////////////////////////////////////////////////////////

package com.game
{
	import com.game.ai.AIState;
	import com.game.CPlayerTeelos;
	import com.greensock.loading.core.DisplayObjectLoader;
	import flash.display.DisplayObjectContainer;
	import math.OpMath;

	/**
	 * @author poof!
	 * @version 1.0
	 * @created 14-Dec-2010 3:02:06 PM
	 */
	public class CCaptainJack extends CPlayerCaptain implements IRangeAttacker
	{
		public var useDynamite:Boolean;
		public var useGrenadeStun:Boolean;
		public var useGrenadePoison:Boolean;
		public var useLineStrike:Boolean;
		
		private var m_meleeAttack:int;
		
		private var m_dynamiteDmg:int;
		private var m_stunDmg:int;
		private var m_poisonDmg:int;
		private var m_strikeDmg:int;
		
		public var mTargetX:int;
		public var mTargetY:Array = [];
		
		public var abilityTargetLane:Array = [];
		
		private var launchDelay:Number;
		
		public function CCaptainJack(){

		}
		
		override public function initialize():void 
		{
			super.initialize();
			
			m_baseAttack = 5;
			m_meleeAttack = 10;
			
			m_dynamiteDmg = 80;
			m_stunDmg = 0;
			m_poisonDmg = 10;
			
			m_defense = 5;
			m_maxLife = 500;
			m_unitClass = UNITCLASS.ARCHER;
			m_counterClass = UNITCLASS.INFANTRY;
			m_counterBonus = 1;
			m_baseSpeed = 0.5;
			m_baseCooldownTime = 1800;
			m_trainCost = 180;
			
			
		}
		
		override public function onCreate(lane:int, targetPosX:int, container:DisplayObjectContainer):void 
		{
			super.onCreate(lane, targetPosX, container);
			m_attackRange = 900;
			
		}
		
		override protected function createSprite():void 
		{
			super.createSprite();
			m_sprite = new mcCaptain_Jack();
		}
		
		override public function update(elapsedTime:int):void 
		{
			super.update(elapsedTime);
			if ( isAnimationComplete())
			{
				if (useDynamite)
				{
					for ( var i:int = 0; i < abilityTargetLane.length; i++ )
					{
						//var node:CPlacementNode = CPlacementNode(m_nodes[targetLane[i]][0]);
						throwDynamite(mTargetX, mTargetY[i], State_GameLoop.getInstance().effectLayer,abilityTargetLane[i]);
						useDynamite = false;
						setCurrentFrame(1);
					}
				}
				else if (useGrenadeStun)
				{
					for ( i = 0; i < abilityTargetLane.length; i++ )
					{
						//var node:CPlacementNode = CPlacementNode(m_nodes[targetLane[i]][0]);
						throwStunGrenade(mTargetX, mTargetY[i], State_GameLoop.getInstance().effectLayer,abilityTargetLane[i]);
						useGrenadeStun = false;
						setCurrentFrame(1);
					}
				}
				else if (useGrenadePoison)
				{
					for ( i = 0; i < abilityTargetLane.length; i++ )
					{
						//var node:CPlacementNode = CPlacementNode(m_nodes[targetLane[i]][0]);
						throwPoisonGrenade(mTargetX, mTargetY[i], State_GameLoop.getInstance().effectLayer,abilityTargetLane[i]);
						useGrenadePoison = false;
						setCurrentFrame(1);
					}
				}
				else if (useLineStrike)
				{
					lineStrike(State_GameLoop.getInstance().effectLayer);
					useLineStrike = false;
					setCurrentFrame(1);
				}
			}
		}
		
		public function throwStunGrenade(targetx:int,targety:int,container:DisplayObjectContainer,lane:int):void
		{
			launchDelay = OpMath.randomNumber(0.1)
			MissileManager.getInstance().launch( CMissileGrenadeStun, container, m_sprite.x, m_sprite.y - 45, 
												 1, getFaction(), lane,
												 m_poisonDmg, m_counterClass, m_counterBonus, m_level, m_detectInvisible, this,
												 {targetX:targetx,targetY:targety, groundLevel:targety,delay:launchDelay} );
		}
		public function throwPoisonGrenade(targetx:int,targety:int,container:DisplayObjectContainer,lane:int):void
		{
			launchDelay = OpMath.randomNumber(0.1)
			MissileManager.getInstance().launch( CMissileGrenadePoison, container, m_sprite.x, m_sprite.y - 45, 
												 1, getFaction(), lane,
												 m_stunDmg, m_counterClass, m_counterBonus, m_level, m_detectInvisible, this,
												 {targetX:targetx,targetY:targety, groundLevel:targety,delay:launchDelay} );
		}
		public function throwDynamite(targetx:int,targety:int,container:DisplayObjectContainer,lane:int):void
		{
			launchDelay = OpMath.randomNumber(0.1)
			MissileManager.getInstance().launch( CMissileDynamite, container, m_sprite.x, m_sprite.y - 45, 
												 1, getFaction(), lane,
												 m_dynamiteDmg, m_counterClass, m_counterBonus, m_level, m_detectInvisible, this,
												 {targetX:targetx,targetY:targety, groundLevel:targety,delay:launchDelay} );
		}
		public function lineStrike(container:DisplayObjectContainer):void
		{
			MissileManager.getInstance().launch(CMissileLineStrike, container, m_sprite.x, m_sprite.y - 45 , 1, 
																	getFaction(), laneIndex, m_strikeDmg, m_counterClass, m_counterBonus, m_level, m_detectInvisible, this, 
																	{targetX:1000, targetY:m_sprite.y} );
		}
		
		override public function releaseProjectile():void
		{
			super.releaseProjectile();
			MissileManager.getInstance().launch( CMissileArrow_Feela, m_container, m_sprite.x, m_sprite.y - 45, 
												 m_sprite.scaleX, getFaction(), m_lane,
												 m_baseAttack, m_counterClass, m_counterBonus, m_level, m_detectInvisible, this );
		}
	}//end CCaptainJack

}